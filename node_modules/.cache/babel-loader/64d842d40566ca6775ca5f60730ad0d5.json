{"ast":null,"code":"import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __rest, __assign } from 'tslib';\nimport React, { useContext, useReducer, useRef, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { invariant } from 'ts-invariant';\nimport 'fast-json-stable-stringify';\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n\n  if (a != null && typeof a === 'object' && b != null && typeof b === 'object') {\n    for (var key in a) {\n      if (Object.prototype.hasOwnProperty.call(a, key)) {\n        if (!Object.prototype.hasOwnProperty.call(b, key)) {\n          return false;\n        }\n\n        if (!isEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n    }\n\n    for (var key in b) {\n      if (Object.prototype.hasOwnProperty.call(b, key) && !Object.prototype.hasOwnProperty.call(a, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this._isMounted = true;\n    this._options = {};\n    this._previousOptions = {};\n    this._context = {};\n    this._options = options || {};\n    this._context = context || {};\n  }\n\n  Object.defineProperty(OperationData.prototype, \"isMounted\", {\n    get: function get() {\n      return this._isMounted;\n    },\n    set: function set(mounted) {\n      this._isMounted = mounted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OperationData.prototype, \"options\", {\n    get: function get() {\n      return this._options;\n    },\n    set: function set(newOptions) {\n      if (!isEqual(this.options, newOptions)) {\n        this.previousOptions = this.options;\n      }\n\n      this._options = newOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OperationData.prototype, \"previousOptions\", {\n    get: function get() {\n      return this._previousOptions;\n    },\n    set: function set(newOptions) {\n      this._previousOptions = newOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OperationData.prototype, \"context\", {\n    get: function get() {\n      return this._context;\n    },\n    set: function set(newContext) {\n      this._context = newContext;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OperationData.prototype, \"client\", {\n    get: function get() {\n      return this._client;\n    },\n    set: function set(newClient) {\n      this._client = newClient;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    var _this = this;\n\n    this.refreshClient();\n    var _a = this.options,\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (!skip) {\n      this.startQuerySubscription();\n    }\n\n    var finish = function finish() {\n      return _this.getQueryResult();\n    };\n\n    if (this.context && this.context.renderPromises) {\n      var result = this.context.renderPromises.addQueryPromise(this, finish);\n      return result || {\n        loading: true,\n        networkStatus: NetworkStatus.loading\n      };\n    }\n\n    return finish();\n  };\n\n  QueryData.prototype.fetchData = function () {\n    if (this.options.skip) return false;\n\n    var _a = this.options,\n        children = _a.children,\n        ssr = _a.ssr,\n        displayName = _a.displayName,\n        skip = _a.skip,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        partialRefetch = _a.partialRefetch,\n        opts = __rest(_a, [\"children\", \"ssr\", \"displayName\", \"skip\", \"onCompleted\", \"onError\", \"partialRefetch\"]);\n\n    var fetchPolicy = opts.fetchPolicy;\n    if (ssr === false) return false;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first';\n    }\n\n    var obs = this.refreshClient().client.watchQuery(__assign({}, opts, {\n      fetchPolicy: fetchPolicy\n    }));\n\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(obs, this.options);\n    }\n\n    var result = this.currentObservable.query.getCurrentResult();\n    return result.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    this.handleErrorOrCompleted();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.currentObservable.query = null;\n    this.previousData.result = null;\n  };\n\n  QueryData.prototype.updateCurrentData = function () {\n    if (this.isMounted) {\n      this.forceUpdate();\n    }\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    this.verifyDocumentType(this.options.query, DocumentType.Query);\n    var displayName = this.options.displayName || 'Query';\n    return __assign({}, this.options, {\n      displayName: displayName,\n      context: this.options.context || {},\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.observableQueryFields = function (observable) {\n    var fields = {\n      variables: observable.variables,\n      refetch: observable.refetch.bind(observable),\n      fetchMore: observable.fetchMore.bind(observable),\n      updateQuery: observable.updateQuery.bind(observable),\n      startPolling: observable.startPolling.bind(observable),\n      stopPolling: observable.stopPolling.bind(observable),\n      subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n    return fields;\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.options);\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign({}, observableQueryOptions, {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(observableQueryOptions);\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n    }\n\n    var newObservableQueryOptions = __assign({}, this.prepareObservableQueryOptions(), {\n      children: null\n    });\n\n    if (!isEqual(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {\n        return null;\n      });\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n\n        if (_this.previousData.result && _this.previousData.result.loading === loading && _this.previousData.result.networkStatus === networkStatus && isEqual(_this.previousData.result.data, data || {})) {\n          return;\n        }\n\n        _this.updateCurrentData();\n      },\n      error: function error(_error) {\n        if (!_this.previousData.result || _this.previousData.result.networkStatus === NetworkStatus.refetch) {\n          _this.resubscribeToQuery();\n        }\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n\n        _this.updateCurrentData();\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = {\n      data: Object.create(null)\n    };\n    Object.assign(result, this.observableQueryFields(this.currentObservable.query));\n\n    if (this.options.skip) {\n      result = __assign({}, result, {\n        data: undefined,\n        error: undefined,\n        loading: false\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n      data = data || Object.create(null);\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      Object.assign(result, {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result ? this.previousData.result.data : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = this.options.partialRefetch;\n\n        if (partialRefetch && Object.keys(data).length === 0 && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var _a = this.currentObservable.query.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.options,\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && isEqual(this.previousOptions.query, query) && isEqual(this.previousOptions.variables, variables) && !this.previousData.loading) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useQuery(query, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      _ignored = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  function getQueryDataRef() {\n    if (!queryDataRef.current) {\n      queryDataRef.current = new QueryData({\n        options: updatedOptions,\n        context: context,\n        forceUpdate: forceUpdate\n      });\n    }\n\n    return queryDataRef.current;\n  }\n\n  var queryData = getQueryDataRef();\n  queryData.options = updatedOptions;\n  queryData.context = context;\n  useEffect(function () {\n    return queryData.afterExecute();\n  });\n  return queryData.execute();\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    var _this = this;\n\n    this.verifyDocumentType(this.options.mutation, DocumentType.Mutation);\n\n    var runMutation = function runMutation(options) {\n      return _this.runMutation(options);\n    };\n\n    return [runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.runMutation = function (mutationFunctionOptions) {\n    var _this = this;\n\n    if (mutationFunctionOptions === void 0) {\n      mutationFunctionOptions = {};\n    }\n\n    this.onMutationStart();\n    var mutationId = this.generateNewMutationId();\n    return this.mutate(mutationFunctionOptions).then(function (response) {\n      _this.onMutationCompleted(response, mutationId);\n\n      return response;\n    }).catch(function (error) {\n      _this.onMutationError(error, mutationId);\n\n      if (!_this.options.onError) throw error;\n    });\n  };\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.options,\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var refetchQueries = mutateOptions.refetchQueries || this.options.refetchQueries;\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.options.ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.options,\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.options.onError;\n\n    var callOnError = function callOnError() {\n      return onError ? onError(error) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    callOnError();\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    this.mostRecentMutationId += 1;\n    return this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !isEqual(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.options = updatedOptions;\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.options);\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (!isEqual(this.previousOptions.variables, this.options.variables) || this.previousOptions.subscription !== this.options.subscription)) {\n      this.endSubscription();\n      delete this.currentObservable.query;\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.options);\n    this.startSubscription();\n    this.previousOptions = this.options;\n    return __assign({}, currentResult, {\n      variables: this.options.variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.options.onSubscriptionData;\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.options.onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    loading: true,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.options = updatedOptions;\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.options);\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.options, new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nfunction getDataFromTree(tree, context) {\n  if (context === void 0) {\n    context = {};\n  }\n\n  return getMarkupFromTree({\n    tree: tree,\n    context: context,\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nfunction getMarkupFromTree(_a) {\n  var tree = _a.tree,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b,\n      _c = _a.renderFunction,\n      renderFunction = _c === void 0 ? require('react-dom/server').renderToStaticMarkup : _c;\n  var renderPromises = new RenderPromises();\n\n  function process() {\n    var ApolloContext = getApolloContext();\n    var html = renderFunction(React.createElement(ApolloContext.Provider, {\n      value: __assign({}, context, {\n        renderPromises: renderPromises\n      })\n    }, tree));\n    return renderPromises.hasPromises() ? renderPromises.consumeAndAwaitPromises().then(process) : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n\nfunction renderToStringWithData(component) {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n\nexport { getDataFromTree, getMarkupFromTree, renderToStringWithData, useApolloClient, useMutation, useQuery, useSubscription };","map":{"version":3,"sources":["../../../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","../../../node_modules/graphql/language/visitor.mjs","../../../node_modules/apollo-utilities/lib/bundle.esm.js","../src/data/OperationData.ts","../src/data/QueryData.ts","../src/useQuery.ts","../src/data/MutationData.ts","../src/useMutation.ts","../src/data/SubscriptionData.ts","../src/useSubscription.ts","../src/useApolloClient.ts","../src/ssr/getDataFromTree.ts","../src/ssr/renderToStringWithData.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i = 0, _Object$keys = Object.keys(node); _i < _Object$keys.length; _i++) {\n            var k = _Object$keys[_i];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments.length === 1) : invariant(directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if') : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            process.env.NODE_ENV === \"production\" ? invariant(ifValue.kind === 'Variable') : invariant(ifValue.kind === 'Variable', \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            evaledValue = variables[ifValue.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directiveName + \" directive.\");\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document') : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query') : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document') : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition') : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (selection.kind === 'Field' &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return (selection.kind === 'Field' &&\n                                selection.name.value === '__typename');\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (Object.prototype.hasOwnProperty.call(b, key) &&\n                !Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (isProduction()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { getDirectiveInfoFromField, shouldInclude, getDirectiveNames, hasDirectives, hasClientExports, getFragmentQueryDocument, getMutationDefinition, checkDocument, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getFragmentDefinitions, getQueryDefinition, getFragmentDefinition, getMainDefinition, createFragmentMap, getDefaultValues, variablesInOperation, removeDirectivesFromDocument, addTypenameToDocument, removeConnectionDirectiveFromDocument, getDirectivesFromDocument, removeArgumentsFromDocument, removeFragmentSpreadFromDocument, buildQueryFromSelectionSet, removeClientSetsFromDocument, isScalarValue, isNumberValue, valueToObjectRepresentation, storeKeyNameFromField, getStoreKeyName, argumentsObjectFromField, resultKeyNameFromField, isField, isInlineFragment, isIdValue, toIdValue, isJsonValue, valueFromNode, assign, cloneDeep, getEnv, isEnv, isProduction, isDevelopment, isTest, tryFunctionOrLogError, graphQLResultHasError, isEqual, maybeDeepFreeze, mergeDeep, mergeDeepArray, warnOnceInDevelopment, stripSymbols };\n//# sourceMappingURL=bundle.esm.js.map\n","import { ApolloClient } from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  private _isMounted: boolean = true;\n  private _options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n  private _previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  private _context: ApolloContextValue = {};\n  private _client: ApolloClient<object> | undefined;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this._options = options || ({} as CommonOptions<TOptions>);\n    this._context = context || {};\n  }\n\n  get isMounted(): boolean {\n    return this._isMounted;\n  }\n\n  set isMounted(mounted: boolean) {\n    this._isMounted = mounted;\n  }\n\n  get options(): CommonOptions<TOptions> {\n    return this._options;\n  }\n\n  set options(newOptions: CommonOptions<TOptions>) {\n    if (!isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this._options = newOptions;\n  }\n\n  get previousOptions(): CommonOptions<TOptions> {\n    return this._previousOptions;\n  }\n\n  set previousOptions(newOptions: CommonOptions<TOptions>) {\n    this._previousOptions = newOptions;\n  }\n\n  get context(): ApolloContextValue {\n    return this._context;\n  }\n\n  set context(newContext: ApolloContextValue) {\n    this._context = newContext;\n  }\n\n  get client(): ApolloClient<object> | undefined {\n    return this._client;\n  }\n\n  set client(newClient: ApolloClient<object> | undefined) {\n    this._client = newClient;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): () => void;\n\n  protected abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  NetworkStatus\n} from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private forceUpdate: any;\n\n  constructor({\n    options,\n    context,\n    forceUpdate\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    forceUpdate: any;\n  }) {\n    super(options, context);\n    this.forceUpdate = forceUpdate;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.options;\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (!skip) {\n      this.startQuerySubscription();\n    }\n\n    const finish = () => this.getQueryResult();\n    if (this.context && this.context.renderPromises) {\n      const result = this.context.renderPromises.addQueryPromise(this, finish);\n      return result || { loading: true, networkStatus: NetworkStatus.loading };\n    }\n\n    return finish();\n  }\n\n  // For server-side rendering (see getDataFromTree.ts)\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    if (this.options.skip) return false;\n\n    // pull off react options\n    const {\n      children,\n      ssr,\n      displayName,\n      skip,\n      onCompleted,\n      onError,\n      partialRefetch,\n      ...opts\n    } = this.options;\n\n    let { fetchPolicy } = opts;\n    if (ssr === false) return false;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first'; // ignore force fetch in SSR;\n    }\n\n    const obs = this.refreshClient().client.watchQuery({\n      ...opts,\n      fetchPolicy\n    });\n\n    // Register the SSR observable, so it can be re-used once the value comes back.\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(obs, this.options);\n    }\n\n    const result = this.currentObservable.query!.getCurrentResult();\n    return result.loading ? obs.result() : false;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    this.handleErrorOrCompleted();\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    this.removeQuerySubscription();\n    this.currentObservable.query = null;\n    this.previousData.result = null;\n  }\n\n  private updateCurrentData() {\n    if (this.isMounted) {\n      this.forceUpdate();\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    this.verifyDocumentType(this.options.query, DocumentType.Query);\n    const displayName = this.options.displayName || 'Query';\n\n    return {\n      ...this.options,\n      displayName,\n      context: this.options.context || {},\n      metadata: { reactComponent: { displayName } }\n    };\n  }\n\n  private observableQueryFields(\n    observable: ObservableQuery<TData, TVariables>\n  ): ObservableQueryFields<TData, TVariables> {\n    const fields = {\n      variables: observable.variables,\n      refetch: observable.refetch.bind(observable),\n      fetchMore: observable.fetchMore.bind(observable),\n      updateQuery: observable.updateQuery.bind(observable),\n      startPolling: observable.startPolling.bind(observable),\n      stopPolling: observable.stopPolling.bind(observable),\n      subscribeToMore: observable.subscribeToMore.bind(observable)\n    };\n    return fields as ObservableQueryFields<TData, TVariables>;\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(\n        this.options\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery(\n        observableQueryOptions\n      );\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => null);\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        if (\n          this.previousData.result &&\n          this.previousData.result.loading === loading &&\n          this.previousData.result.networkStatus === networkStatus &&\n          isEqual(this.previousData.result.data, data || {})\n        ) {\n          return;\n        }\n\n        this.updateCurrentData();\n      },\n      error: error => {\n        if (\n          !this.previousData.result ||\n          this.previousData.result.networkStatus === NetworkStatus.refetch\n        ) {\n          this.resubscribeToQuery();\n        }\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        this.updateCurrentData();\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result = {\n      data: Object.create(null) as TData\n    } as any;\n\n    // Attach bound methods\n    Object.assign(\n      result,\n      this.observableQueryFields(this.currentObservable.query!)\n    );\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (this.options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n      data = data || (Object.create(null) as TData);\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      Object.assign(result, { loading, networkStatus, error });\n\n      if (loading) {\n        const previousData = this.previousData.result\n          ? this.previousData.result.data\n          : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = this.options;\n        if (\n          partialRefetch &&\n          Object.keys(data).length === 0 &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as an empty Object since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const {\n      data,\n      loading,\n      error\n    } = this.currentObservable.query!.getCurrentResult();\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.options;\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables) &&\n        !this.previousData.loading\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions } from './types';\nimport { QueryData } from './data/QueryData';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [_ignored, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  function getQueryDataRef() {\n    if (!queryDataRef.current) {\n      queryDataRef.current = new QueryData<TData, TVariables>({\n        options: updatedOptions as QueryOptions<TData, TVariables>,\n        context,\n        forceUpdate\n      });\n    }\n    return queryDataRef.current;\n  }\n\n  const queryData = getQueryDataRef();\n  queryData.options = updatedOptions;\n  queryData.context = context;\n\n  useEffect(() => {\n    return queryData.afterExecute();\n  });\n\n  return queryData.execute();\n}\n","import { ApolloError } from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.verifyDocumentType(this.options.mutation, DocumentType.Mutation);\n    const runMutation = (\n      options?: MutationFunctionOptions<TData, TVariables>\n    ) => this.runMutation(options);\n    return [runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation(\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.options.onError) throw error;\n      });\n  }\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.options;\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    let refetchQueries =\n      mutateOptions.refetchQueries || this.options.refetchQueries;\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.options.ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.options;\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.options;\n    const callOnError = () => (onError ? onError(error) : null);\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n    callOnError();\n  }\n\n  private generateNewMutationId(): number {\n    this.mostRecentMutationId += 1;\n    return this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.options = updatedOptions;\n  mutationData.context = context;\n\n  useEffect(() => {\n    return mutationData.afterExecute();\n  });\n\n  return mutationData.execute(result);\n}\n","import { isEqual } from 'apollo-utilities';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    let currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.options;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.options);\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (!isEqual(this.previousOptions.variables, this.options.variables) ||\n        this.previousOptions.subscription !== this.options.subscription)\n    ) {\n      this.endSubscription();\n      delete this.currentObservable.query;\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.options);\n    this.startSubscription();\n\n    this.previousOptions = this.options;\n    return { ...currentResult, variables: this.options.variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const {\n      options: { onSubscriptionData }\n    } = this;\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.options;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({\n    loading: true,\n    error: undefined,\n    data: undefined\n  });\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.options = updatedOptions;\n  subscriptionData.context = context;\n\n  useEffect(() => {\n    return subscriptionData.afterExecute();\n  });\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import React from 'react';\nimport { ObservableQuery } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, ApolloContextValue } from '@apollo/react-common';\n\nimport { QueryData } from '../data/QueryData';\nimport { QueryOptions } from '../types';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.options);\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.options,\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {}\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> | string {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the original component tree.\n    const ApolloContext = getApolloContext();\n    const html = renderFunction(\n      React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises } },\n        tree\n      )\n    );\n\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(\n  component: ReactElement<any>\n): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n"]},"metadata":{},"sourceType":"module"}