import { ApolloQueryResult } from 'apollo-client';
import { ApolloContextValue, QueryResult } from '@apollo/react-common';
import { QueryOptions } from '../types';
import { OperationData } from './OperationData';
export declare class QueryData<TData, TVariables> extends OperationData {
    private previousData;
    private currentObservable;
    private forceUpdate;
    constructor({ options, context, forceUpdate }: {
        options: QueryOptions<TData, TVariables>;
        context: ApolloContextValue;
        forceUpdate: any;
    });
    execute(): QueryResult<TData, TVariables>;
    fetchData(): Promise<ApolloQueryResult<any>> | boolean;
    afterExecute(): () => void;
    protected cleanup(): void;
    private updateCurrentData;
    private prepareObservableQueryOptions;
    private observableQueryFields;
    private initializeObservableQuery;
    private updateObservableQuery;
    private startQuerySubscription;
    private resubscribeToQuery;
    private getQueryResult;
    private handleErrorOrCompleted;
    private removeQuerySubscription;
}
