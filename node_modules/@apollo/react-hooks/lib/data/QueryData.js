import * as tslib_1 from "tslib";
import { ApolloError, NetworkStatus } from 'apollo-client';
import { isEqual } from 'apollo-utilities';
import { DocumentType } from '@apollo/react-common';
import { OperationData } from './OperationData';
var QueryData = (function (_super) {
    tslib_1.__extends(QueryData, _super);
    function QueryData(_a) {
        var options = _a.options, context = _a.context, forceUpdate = _a.forceUpdate;
        var _this = _super.call(this, options, context) || this;
        _this.previousData = {};
        _this.currentObservable = {};
        _this.forceUpdate = forceUpdate;
        return _this;
    }
    QueryData.prototype.execute = function () {
        var _this = this;
        this.refreshClient();
        var _a = this.options, skip = _a.skip, query = _a.query;
        if (skip || query !== this.previousData.query) {
            this.removeQuerySubscription();
            this.previousData.query = query;
        }
        this.updateObservableQuery();
        if (!skip) {
            this.startQuerySubscription();
        }
        var finish = function () { return _this.getQueryResult(); };
        if (this.context && this.context.renderPromises) {
            var result = this.context.renderPromises.addQueryPromise(this, finish);
            return result || { loading: true, networkStatus: NetworkStatus.loading };
        }
        return finish();
    };
    QueryData.prototype.fetchData = function () {
        if (this.options.skip)
            return false;
        var _a = this.options, children = _a.children, ssr = _a.ssr, displayName = _a.displayName, skip = _a.skip, onCompleted = _a.onCompleted, onError = _a.onError, partialRefetch = _a.partialRefetch, opts = tslib_1.__rest(_a, ["children", "ssr", "displayName", "skip", "onCompleted", "onError", "partialRefetch"]);
        var fetchPolicy = opts.fetchPolicy;
        if (ssr === false)
            return false;
        if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {
            fetchPolicy = 'cache-first';
        }
        var obs = this.refreshClient().client.watchQuery(tslib_1.__assign({}, opts, { fetchPolicy: fetchPolicy }));
        if (this.context && this.context.renderPromises) {
            this.context.renderPromises.registerSSRObservable(obs, this.options);
        }
        var result = this.currentObservable.query.getCurrentResult();
        return result.loading ? obs.result() : false;
    };
    QueryData.prototype.afterExecute = function () {
        this.isMounted = true;
        this.handleErrorOrCompleted();
        return this.unmount.bind(this);
    };
    QueryData.prototype.cleanup = function () {
        this.removeQuerySubscription();
        this.currentObservable.query = null;
        this.previousData.result = null;
    };
    QueryData.prototype.updateCurrentData = function () {
        if (this.isMounted) {
            this.forceUpdate();
        }
    };
    QueryData.prototype.prepareObservableQueryOptions = function () {
        this.verifyDocumentType(this.options.query, DocumentType.Query);
        var displayName = this.options.displayName || 'Query';
        return tslib_1.__assign({}, this.options, { displayName: displayName, context: this.options.context || {}, metadata: { reactComponent: { displayName: displayName } } });
    };
    QueryData.prototype.observableQueryFields = function (observable) {
        var fields = {
            variables: observable.variables,
            refetch: observable.refetch.bind(observable),
            fetchMore: observable.fetchMore.bind(observable),
            updateQuery: observable.updateQuery.bind(observable),
            startPolling: observable.startPolling.bind(observable),
            stopPolling: observable.stopPolling.bind(observable),
            subscribeToMore: observable.subscribeToMore.bind(observable)
        };
        return fields;
    };
    QueryData.prototype.initializeObservableQuery = function () {
        if (this.context && this.context.renderPromises) {
            this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.options);
        }
        if (!this.currentObservable.query) {
            var observableQueryOptions = this.prepareObservableQueryOptions();
            this.previousData.observableQueryOptions = tslib_1.__assign({}, observableQueryOptions, { children: null });
            this.currentObservable.query = this.refreshClient().client.watchQuery(observableQueryOptions);
        }
    };
    QueryData.prototype.updateObservableQuery = function () {
        if (!this.currentObservable.query) {
            this.initializeObservableQuery();
        }
        var newObservableQueryOptions = tslib_1.__assign({}, this.prepareObservableQueryOptions(), { children: null });
        if (!isEqual(newObservableQueryOptions, this.previousData.observableQueryOptions)) {
            this.previousData.observableQueryOptions = newObservableQueryOptions;
            this.currentObservable
                .query.setOptions(newObservableQueryOptions)
                .catch(function () { return null; });
        }
    };
    QueryData.prototype.startQuerySubscription = function () {
        var _this = this;
        if (this.currentObservable.subscription)
            return;
        var obsQuery = this.currentObservable.query;
        this.currentObservable.subscription = obsQuery.subscribe({
            next: function (_a) {
                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;
                if (_this.previousData.result &&
                    _this.previousData.result.loading === loading &&
                    _this.previousData.result.networkStatus === networkStatus &&
                    isEqual(_this.previousData.result.data, data || {})) {
                    return;
                }
                _this.updateCurrentData();
            },
            error: function (error) {
                if (!_this.previousData.result ||
                    _this.previousData.result.networkStatus === NetworkStatus.refetch) {
                    _this.resubscribeToQuery();
                }
                if (!error.hasOwnProperty('graphQLErrors'))
                    throw error;
                _this.updateCurrentData();
            }
        });
    };
    QueryData.prototype.resubscribeToQuery = function () {
        this.removeQuerySubscription();
        var lastError = this.currentObservable.query.getLastError();
        var lastResult = this.currentObservable.query.getLastResult();
        this.currentObservable.query.resetLastResults();
        this.startQuerySubscription();
        Object.assign(this.currentObservable.query, {
            lastError: lastError,
            lastResult: lastResult
        });
    };
    QueryData.prototype.getQueryResult = function () {
        var result = {
            data: Object.create(null)
        };
        Object.assign(result, this.observableQueryFields(this.currentObservable.query));
        if (this.options.skip) {
            result = tslib_1.__assign({}, result, { data: undefined, error: undefined, loading: false });
        }
        else {
            var currentResult = this.currentObservable.query.getCurrentResult();
            var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;
            var error = currentResult.error, data = currentResult.data;
            data = data || Object.create(null);
            if (errors && errors.length > 0) {
                error = new ApolloError({ graphQLErrors: errors });
            }
            Object.assign(result, { loading: loading, networkStatus: networkStatus, error: error });
            if (loading) {
                var previousData = this.previousData.result
                    ? this.previousData.result.data
                    : {};
                Object.assign(result.data, previousData, data);
            }
            else if (error) {
                Object.assign(result, {
                    data: (this.currentObservable.query.getLastResult() || {})
                        .data
                });
            }
            else {
                var fetchPolicy = this.currentObservable.query.options.fetchPolicy;
                var partialRefetch = this.options.partialRefetch;
                if (partialRefetch &&
                    Object.keys(data).length === 0 &&
                    partial &&
                    fetchPolicy !== 'cache-only') {
                    Object.assign(result, {
                        loading: true,
                        networkStatus: NetworkStatus.loading
                    });
                    result.refetch();
                    return result;
                }
                Object.assign(result.data, data);
            }
        }
        result.client = this.client;
        this.previousData.loading =
            (this.previousData.result && this.previousData.result.loading) || false;
        this.previousData.result = result;
        return result;
    };
    QueryData.prototype.handleErrorOrCompleted = function () {
        var _a = this.currentObservable.query.getCurrentResult(), data = _a.data, loading = _a.loading, error = _a.error;
        if (!loading) {
            var _b = this.options, query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError;
            if (this.previousOptions &&
                isEqual(this.previousOptions.query, query) &&
                isEqual(this.previousOptions.variables, variables) &&
                !this.previousData.loading) {
                return;
            }
            if (onCompleted && !error) {
                onCompleted(data);
            }
            else if (onError && error) {
                onError(error);
            }
        }
    };
    QueryData.prototype.removeQuerySubscription = function () {
        if (this.currentObservable.subscription) {
            this.currentObservable.subscription.unsubscribe();
            delete this.currentObservable.subscription;
        }
    };
    return QueryData;
}(OperationData));
export { QueryData };
//# sourceMappingURL=QueryData.js.map