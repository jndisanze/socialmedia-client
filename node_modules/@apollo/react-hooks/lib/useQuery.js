import * as tslib_1 from "tslib";
import { useContext, useEffect, useReducer, useRef } from 'react';
import { getApolloContext } from '@apollo/react-common';
import { QueryData } from './data/QueryData';
export function useQuery(query, options) {
    var context = useContext(getApolloContext());
    var _a = useReducer(function (x) { return x + 1; }, 0), _ignored = _a[0], forceUpdate = _a[1];
    var updatedOptions = options ? tslib_1.__assign({}, options, { query: query }) : { query: query };
    var queryDataRef = useRef();
    function getQueryDataRef() {
        if (!queryDataRef.current) {
            queryDataRef.current = new QueryData({
                options: updatedOptions,
                context: context,
                forceUpdate: forceUpdate
            });
        }
        return queryDataRef.current;
    }
    var queryData = getQueryDataRef();
    queryData.options = updatedOptions;
    queryData.context = context;
    useEffect(function () {
        return queryData.afterExecute();
    });
    return queryData.execute();
}
//# sourceMappingURL=useQuery.js.map